services:
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=route53"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - AWS_HOSTED_ZONE_ID=${ROUTE53_ZONE}
      - AWS_REGION=${REGION}
    env_file:
      - .env
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    network_mode: host

  frontend:
    image: eddiethecubehead/stagnum_client:master
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.frontend.tls.domains[0].sans=*.${DOMAIN}"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - outgoing
      - internal
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL}
      VITE_FRONTEND_URL: ${VITE_FRONTEND_URL}
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env

  backend:
    image: eddiethecubehead/stagnum_server:master
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`back.${DOMAIN}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.routers.backend.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.backend.tls.domains[0].sans=*.${DOMAIN}"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - outgoing
      - internal
    environment:
      DATABASE_CONNECTION_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:${DATABASE_PORT}/${POSTGRES_DB}
      VERBOSE_SQLALCHEMY: false
      CORS_ORIGINS: "https://stagnum.net,wss://stagnum.net"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    secrets:
      - spotify_client_id
      - spotify_client_secret
    env_file:
      - .env

  database:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    ports:
      - ${DATABASE_PORT}:5432
    networks:
      - internal
    env_file:
      - .env
    volumes:
      - ../data/postgres:/var/lib/postgresql/data

  watchtower:
    # This container is watching for updates in docker images and updating to latest
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 1000

secrets:
  spotify_client_id:
    file: ./secret_spotify_client_id.txt
  spotify_client_secret:
    file: ./secret_spotify_client_secret.txt

networks:
  outgoing:
    driver: bridge
  internal:
    driver: bridge
