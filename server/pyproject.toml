############################
# project
############################


[project]
name = "stagnum-server"
version = "0.2.0"
description ="Server for the Stagnum project"
requires-python = "==3.13.*"
dependencies = [
    "alembic==1.16.2",
    "apscheduler==3.11.0",
    "fastapi==0.115.14",
    "uvicorn==0.35.0",
    "requests==2.32.4",
    "sqlalchemy==2.0.41",
    "websockets==15.0.1",
    "hatchling==1.27.0",
    "psycopg[binary]==3.2.9",
]

[dependency-groups]
dev = [
    "httpx==0.28.1",
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "faker==37.4.0",
    "ruff==0.12.1",
    "pytest-cov==6.2.1",
    "testcontainers>=4.10.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages=["src"]

############################
# ruff
############################

[tool.ruff]
line-length = 120
fix = true
unsafe-fixes = true

[tool.ruff.lint]
select = [
    "F",      # pyflakes
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "C90",    # mccabe complexity analysis
    "I",      # isort
    "N",      # pep8 naming
    "UP",     # pyupgrade
    "ANN",    # flake8 annotations
    "ASYNC",  # flake8 async
    "BLE",    # flake8 blind expect
    "FBT",    # flake8 boolean trap
    "B",      # flake8 bugbear
    "A",      # flake8 builtins
    "COM",    # flake8 commas
    "C4",     # flake8 comprehensions
    "DTZ",    # flake8 datetimes
    "T10",    # flake8 debugger
    "EM",     # flake8 error messages
    "ICN",    # flake8 import conventions
    "LOG",    # flake8 logging
    "INP",    # flake8 implicit namespace package
    "PIE",    # flake8 pie extension (misc.)
    "T",      # flake8 print
    "PT",     # flake8 pytest
    "Q",      # flake8 quotes
    "RSE",    # flake8 raise
    "RET",    # flake8 return
    "SLF",    # flake8 private members
    "SIM",    # flake8 simplify
    "TID253", # absolute imports over relative imports
    "TCH",    # flake8 type checking
    "ARG",    # flake8 unused arguments
    "PTH",    # flake8 use pathlib
    "ERA",    # commented out code
    "PGH",    # pygrep hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "PERF",   # perflint
    "FURB",   # refurb
    "RUF",    # ruff own rules
]
ignore = [
    "COM812", # trailing comma
    "PLR0913", # too many arguments in function definition - should not be automatically enforced but left to user
]
unfixable = [
    "E711"  # SQLAlchemy doens't support 'is None' checks -> autofixing '== None' to 'is None' breaks code
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"!test/**.py" = ["PT"]
"test/**.py" = ["PLR2004"] # tests should be able to assert equals to "magical numbers"
"test/*.py" = ["INP001"] # do not require tests root to be package
"src/*.py" = ["INP001"] # do not require src root to be package
"src/alembic/**.py" = [
    "INP001",  # do not require alembic or any subdirectories to be package - autogenerated
    "ERA001",  # ignore autogenerated code in alembic or any subdirectories - autogenerated
]

[tool.ruff.format]
skip-magic-trailing-comma = true
preview = true
line-ending = "lf"

[tool.ruff.lint.isort]
# Problem with PyCharm and ruff - cross-referencing between test and src breaks without this
known-first-party = ["api", "database"]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "tuple"
parametrize-values-type = "tuple"
parametrize-values-row-type = "tuple"

############################
# pytest
############################

[tool.pytest.ini_options]
python_files = "*_features.py"
python_classes = "*Features"
python_functions = "should_*"
pythonpath = "src"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

############################
# coverage
############################

[tool.coverage.run]

source = ["src"]
omit = [
    "src/main.py",
    "src/logging_config.py"
]
branch = true
